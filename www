#!/usr/bin/env node

/**
 * Module dependencies.
 */
var api = require('../api');
var debug = require('debug')('site4_smop:server');
var http = require('http');
/**
 * Get port from environment and store in Express.
 */
var apiport = normalizePort(process.env.PORT || '3001'); // used to create, sign, and verify tokens
api.set('port', apiport);
/**
 * Create HTTP server.
 */
var apiServer = http.createServer(api);
/**
 * Listen on provided port, on all network interfaces.
 */
apiServer.listen(apiport);
apiServer.on('error', onError(true));
apiServer.on('listening', onListening(true));
/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
	var port = parseInt(val, 10);
	if (isNaN(port)) {
		// named pipe
		return val;
	}
	if (port >= 0) {
		// port number
		return port;
	}
	return false;
}
/**
 * Event listener for HTTP server "error" event.
 */
function onError(error, apiTF) {
	if (apiTF) {
		var p = apiport;
	}
	else {
		var p = port;
	}
	if (error.syscall !== 'listen') {
		throw error;
	}
	var bind = typeof p === 'string' ? 'Pipe ' + p : 'Port ' + p;
	// handle specific listen errors with friendly messages
	switch (error.code) {
	case 'EACCES':
		console.error(bind + ' requires elevated privileges');
		process.exit(1);
		break;
	case 'EADDRINUSE':
		console.error(bind + ' is already in use');
		process.exit(1);
		break;
	default:
		throw error;
	}
}
/**
 * Event listener for HTTP server "listening" event.
 */
function onListening(apiTF) {
	if (apiTF) {
		var s = apiServer;
	}
	else {
		var s = server;
	}
	var addr = s.address();
	var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
	debug('Listening on ' + bind);
}